import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
dotenv.config(); // N·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
const sendOtpEmail = async (toEmail, otp) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL,         // thay b·∫±ng email th·∫≠t
      pass: process.env.EMAIL_PASSWORD,            // pass ·ª©ng d·ª•ng (kh√¥ng ph·∫£i m·∫≠t kh·∫©u t√†i kho·∫£n)
    },
  });

  const mailOptions = {
    from: '"Th∆∞ vi·ªán Bookio" <your_email@gmail.com>',
    to: toEmail,
    subject: '[Th∆∞ vi·ªán Bookio] M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u',
    html: `
      <h3>Xin ch√†o,</h3>
      <p>M√£ OTP c·ªßa b·∫°n l√†: <strong>${otp}</strong></p>
      <p>M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.</p>
    `,
  };

  await transporter.sendMail(mailOptions);
};

const sendReminderEmail = async (user) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL,
      pass: process.env.EMAIL_PASSWORD,
    },
  });

  const bookListHtml = user.books.map(book => `
    <li><b>${book.title}</b> (Ng√†y m∆∞·ª£n: ${book.borrowDate}, H·∫°n tr·∫£: ${book.dueDate})</li>
  `).join('');

  const mailOptions = {
    from: `"Th∆∞ vi·ªán Bookio" <${process.env.EMAIL_USER}>`,
    to: user.email,
    subject: `[Th∆∞ vi·ªán Bookio] Nh·∫Øc l·ªãch tr·∫£ s√°ch h√¥m nay`,
    html: `
      <p>K√≠nh g·ª≠i <b>${user.name ?? 'B·∫°n'}</b>,</p>
      <p>Th∆∞ vi·ªán Bookio xin nh·∫Øc b·∫°n v·ªÅ c√°c s√°ch ƒë·∫øn h·∫°n tr·∫£ h√¥m nay:</p>
      <ul>${bookListHtml}</ul>
      <p>Vui l√≤ng ho√†n tr·∫£ s√°ch ƒë√∫ng h·∫°n.</p>
      <p>Tr√¢n tr·ªçng,<br/>Th∆∞ vi·ªán Bookio</p>
    `
  };

  transporter.sendMail(mailOptions, (err, info) => {
    if (err) return console.error(err);
    console.log(`üìß ƒê√£ g·ª≠i email ƒë·∫øn: ${user.email}`);
  });
}


export default { sendOtpEmail, sendReminderEmail };